# -*- coding: utf-8 -*-
"""DIC_FINAL_CODE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZXsltBRcynA1-xE0Jrdu008YdwzG-FE
"""

!pip install anvil-uplink

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import anvil.server

dataset = pd.read_csv('v4.csv')
dataset.rename(columns={'Total Living Area': 'Total_Living_Area'}, inplace=True)
dataset['Total_Living_Area'] = dataset['Total_Living_Area'].astype('float64')
dataset['Deed_Date'] = dataset['Deed_Date'].astype('datetime64[ns]')
dataset['Council_District'] = dataset['Council_District'].astype('string')
dataset['Police_District'] = dataset['Police_District'].astype('string')
dataset['Neighborhood'] = dataset['Neighborhood'].astype('string')
dataset['Print_Key'] = dataset['Print_Key'].astype('string')
dataset['Street'] = dataset['Street'].astype('string')
dataset['Front'] = dataset['Front'].astype('float64')
dataset['Land_Value'] = dataset['Land_Value'].astype('float64')
dataset['Total_Value'] = dataset['Total_Value'].astype('float64')
dataset['Sale_Price'] = dataset['Sale_Price'].astype('float64')
dataset['Year_Built'] = dataset['Year_Built'].astype('int64')
dataset['Census_Tract'] = dataset['Census_Tract'].astype('float64')

from pandas.core.indexes.interval import date_range
from scipy.optimize.lbfgsb import float64

num_vars = ['Front', 'Depth', 'Beds','Total_Living_Area','Zipcode','Deed_Date']
num_vars_y=['Total_Living_Area','Sale_Price']

gt=dataset[num_vars];
gt = gt[gt.Total_Living_Area != 0]
gt = gt.reset_index(drop=True)
bt = dataset[num_vars_y]
bt = bt[bt.Total_Living_Area != 0]
bt = bt.reset_index(drop=True)
print(len(gt))
print(len(bt))
print(len(dataset))

ddate=[];
for i in range (gt.Deed_Date.size):
    ddate.append(dataset.Deed_Date[i].year*100+dataset.Deed_Date[i].month);
gt.Deed_Date=ddate

yt=[]
for i in range (bt.Total_Living_Area.size):
   yt.append((bt.Sale_Price[i])/(bt.Total_Living_Area[i]))
print(yt[592])

saleprice=[]
for i in range (bt.Total_Living_Area.size):
   saleprice.append((bt.Sale_Price[i]))
print(saleprice[592])
gt.head()

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split( gt, yt, test_size = 1/4, random_state = 0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, Y_train)

#Multi Linear Regression
from sklearn.model_selection import train_test_split
X_train_S, X_test_S, Y_train_S, Y_test_S = train_test_split( gt, saleprice, test_size = 1/4, random_state = 0) 

from sklearn.linear_model import LinearRegression
regressorS = LinearRegression()
regressorS.fit(X_train_S, Y_train_S)

from scipy.optimize.lbfgsb import float64
ddate=[]#dataset.Deed_Date;
sprice=[]#dataset.Sale_Price
for i in range (dataset.Deed_Date.size):
  if(dataset.Total_Living_Area[i]>100 and dataset.Sale_Price[i]/dataset.Total_Living_Area[i]<400 
     and dataset.Sale_Price[i]/dataset.Total_Living_Area[i]>30 and dataset.Deed_Date[i].year>2005):
   ddate.append([dataset.Deed_Date[i].year*100+dataset.Deed_Date[i].month]);
   sprice.append((dataset.Sale_Price[i])/(dataset.Total_Living_Area[i]))

#Simple Linear Regression Code
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split( ddate, sprice, test_size = 1/4, random_state = 0) 

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor = regressor.fit(X_train, Y_train)

from PIL import Image
import io

plt.scatter(X_test , Y_test, color = 'red')
plt.plot(X_test, regressor.predict(X_test), color ='blue')
f = plt.figure()
f.set_figwidth(20)
f.set_figheight(20)
# labels=[]
# for i in range(199000,202200,200):
#   labels.append(i)
# plt.xticks(labels)

img_buf = io.BytesIO()
plt.savefig(img_buf, format='png')

im = Image.open(img_buf)
im.show(title="My Image")

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(dataset.Neighborhood.values)
le.transform(dataset.Neighborhood.values)

from sklearn.model_selection import train_test_split
X_train_lr, X_test_lr, Y_train_lr, Y_test_lr = train_test_split( le.transform(dataset.Neighborhood.values), dataset.Sale_Price, test_size = 1/4, random_state = 0)

from sklearn.linear_model import LinearRegression
regressor_lr = LinearRegression()
regressor_lr = regressor_lr.fit(X_train_lr.reshape(-1,1), Y_train_lr)

for i in range(0,36):
  if(regressor_lr.predict([[i]])):
    print(i,le.inverse_transform([i])[0],regressor_lr.predict([[i]])[0])

#all the server calls
import anvil.server

anvil.server.connect("56XRKQ76VXCMCMFLYWBBKM3K-TAYXUM7ZRRAND3Y6")

import anvil.media
@anvil.server.callable
def classify_predict_saleprice(f,d,b,t,z,dd):
  print(f,d,b,t,z,dd.year*100+dd.month)
  zipcode_saleprice=[]
  for i in range(14200,14228):
    zipcode_saleprice.append({'column_1':i,'column_2':round(regressorS.predict([[f,d, b,t,i,dd.year*100+dd.month]])[0])})
  return ('The Predcited Asking Sale Price : ',regressorS.predict([[f,d,b,t,z,dd.year*100+dd.month]])[0],zipcode_saleprice)


import anvil.media
@anvil.server.callable
def classify_predict_ne(dam):
  nei_sale=[]
  for i in range(0,36):
    nei_sale.append({'column_1':le.inverse_transform([i])[0],'column_2':round(regressor_lr.predict([[i]])[0]) })
  return (nei_sale)

import anvil.media
@anvil.server.callable
def classify_predict(dam):
  print(regressor.predict([[dam.year*100+dam.month]])[0])
  return ('Square Foot Price As on Above Date :- ',round(regressor.predict([[dam.year*100+dam.month]])[0]))

anvil.server.wait_forever()